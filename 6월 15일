# solve sql 문제 풀이 

1. [다른 방식으로 풀어보기] 월별 주문 리텐션(클래식 리텐션)

WITH records_preprocessed AS (
    SELECT r.customer_id
         , DATE_FORMAT(c.first_order_date, '%Y-%m-01') first_order_month
         , DATE_FORMAT(r.order_date, '%Y-%m-01') order_month
    FROM records r
         LEFT JOIN customer_stats c ON r.customer_id = c.customer_id
)

SELECT first_order_month
     , COUNT(DISTINCT customer_id) month0
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 1 MONTH) = order_month THEN customer_id END) AS month1
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 2 MONTH) = order_month THEN customer_id END) AS month2
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 3 MONTH) = order_month THEN customer_id END) AS month3
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 4 MONTH) = order_month THEN customer_id END) AS month4
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 5 MONTH) = order_month THEN customer_id END) AS month5
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 6 MONTH) = order_month THEN customer_id END) AS month6
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 7 MONTH) = order_month THEN customer_id END) AS month7
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 8 MONTH) = order_month THEN customer_id END) AS month8
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 9 MONTH) = order_month THEN customer_id END) AS month9
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 10 MONTH) = order_month THEN customer_id END) AS month10
     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 11 MONTH) = order_month THEN customer_id END) AS month11
from records_preprocessed
GROUP BY 1
ORDER BY 1

1.1. 회고겸 주저리 
- 두 테이블에서 공통되는 데이터를 추출해야 할 때 : inner join 
- 문제에서 each 혹은 inner join을 통해 혹시나 유실되는 데이터가 없어야 할 때는 left join을 쓰는 것이 합리적이다.

1.2. 새로 배운 개념
드라이빙 테이블/드리븐 테이블 
- JOIN시 먼저 액세스 되어서 Access path를 주도하는 테이블
- 즉, 조인시 먼저 액세스되는 쪽을 드라이빙 테이블(DRIVING TABLE, OUTER TABLE)이라고 하며, 
  나중에 액세스 되는 테이블을 드리븐 테이블(DRIVEN TABLE, INNER TABLE)이라고 한다.
- 인덱스의 존재 및 우선순위 혹은 FROM절에서의 TABLE 지정 순서에 영향을 받으며
  어느 테이블이 먼저 엑세스되느냐에 따라 속도의 차이가 크게 날 수 있으므로 많은 양의 데이터를 다룰 때, 드라이빙 테이블은 매우 중요하다.
  

2. [어제 푼 문제를 다른 방식으로] 온라인 쇼핑몰의 Stickiness 

SELECT d.order_date as dt 
        , COUNT(DISTINCT d.customer_id) as dau
        , cOUNT(DISTINCT w.customer_id) as wau
        , COALESCE(ROUND(COUNT(DISTINCT d.customer_id)/COUNT(DISTINCT w.customer_id),2),0) as stickiness 
FROM records d 
    LEFT JOIN records w on w.order_date BETWEEN date_add(d.order_date, INTERVAL -6 day) AND d.order_date 
WHERE date_format(d.order_date, '%Y-%m-%d') BETWEEN '2020-11-01' AND '2020-11-31'
GROUP BY 1
HAVING COUNT(DISTINCT d.order_id) > 0 -- 한 번이라도 주문 한 적 있는 고객
ORDER BY 1 

2.1. 회고 겸 주저리
- 한 번이라도 주문을 한 적 있는 고객을 count 해야하기 때문에 having을 사용해서 조건을 추가하기 
- 문제는 데이터가 정제되어 나오기 때문에 null 관련 함수를 잘 사용하지 않는 경향이 있는데, 현업에서는 정제되지 않은 데이터를 마주 하는 일이 많기 때문에
  NULL관련 함수와 문제에 기재되어있는 조건(ex.한 번이라도 주문 한 적 있는 고객)에 만족하는 쿼리를 짜보는 것을 습관화 하자.
  
2.2. NULL 관련 함수 모음 
NVL(표현식1,표현식2)
ISNULL(표현식1,표현식2)
-> 표현식1의 결과 값이 NULL 이면 표현식2 의 값을 출력한다  
   단 표현식 1과 표현식2의 결과 데이터 타입이 항상 같아야만 한다 
   NULL 관련 함수중 가장 많이 사용한다 

NULLIF(표현식1,표현식2)
-> 표현식1이 표현식 2와같으면 NULL 을 아니면 표현식 1 값을 RETURN

COALESCE(표현식1,2..)
-> 임이의 개수의 표현식에서 NULL 값이 아닌 최초의 표현식을 나타낸다


