곧 오는 처서매직에 선선한 날씨가 너무 좋았다. 

[1699#_MEDIUM] Number of Calls Between Two Persons

# 풀이 과정
person1과 person2에는 to_id와 from_id가 모두 올 수 있다.
하지만 문제에서 요구하는 조건은 person1 < person2여야하기 때문에 
가상 테이블을 만들어서 해당 조건을 충족시키기로 함. 

가상테이블 temp : 
to_id를 person1, from_id를 person2라고 컬럼별칭을 지정해두고 조건절로 from_id가 to_id보다 큰 값인 값만 출력 
to_id를 person2, from_id를 person1라고 컬럼별칭을 지정해두고 조건절로 to_id가 from_id보다 큰 값만 출력한 다음
두 테이블을 union all로 합쳐줌.

그렇게 생성된 가상테이블을 이용해서 해당 문제에서 요구하는 데이터를 출력한다. 

# 최종 쿼리  
with temp as (
    select to_id as person1,
            from_id as person2,
            duration
    from calls 
    where to_id < from_id 
    union all 
    select from_id as person1,
            to_id as person2,
            duration
    from calls
    where from_id < to_id )
    
select person1,
        person2,
        count(person1) as call_count,
        sum(duration) as total_duration 
from temp 
group by person1, person2

-------------------------------------------------------------

[569#_HARD] Median Employee Salary

# 풀이 과정 
1. salary를 오름차순으로 정렬이 되어야 함. 그리고 각 salary에 값에 row_number로 번호표가 필요 
2. 홀수 : company기준 count(*)%2 = 0 이라면 salary_rnk = count(*)/2번째 값과 salary_rnk = count(*)/2+1번째 값을 출력해야함
   짝수 : company 기준 count(*)%2 !=0 이라면, salary_rnk = round(count(*)/2))번째 값을 출력해야함. 

# 최종 쿼리 
with f_cnt as(
    select company
        , count(*) as cnt 
    from employee
    group by company), 

o_salary as (
    select id,
            company,
            salary,
            row_number() over(partition by company order by salary asc) as rnk
    from employee)

select id,
    o.company as company,
    salary 
from o_salary o
    join f_cnt f on o.company = f.company  
where (cnt%2=0 and (rnk = cnt/2 or rnk = cnt/2+1)) 
or (cnt%2 != 0 and rnk = round(cnt/2));
