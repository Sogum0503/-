1. 입문반 페이지를 본 세션 찾기

# 서브쿼리
SELECT COUNT(DISTINCT user_pseudo_id,ga_session_id) as total,
       COUNT(DISTINCT user_pseudo_id,ga_session_id) - 
       (SELECT COUNT(DISTINCT user_pseudo_id,ga_session_id)
       FROM ga 
       WHERE page_title = "백문이불여일타 SQL 캠프 입문반"
       AND event_name = "page_view") as pv_no,
       (SELECT COUNT(DISTINCT user_pseudo_id,ga_session_id)
       FROM ga 
       WHERE page_title = "백문이불여일타 SQL 캠프 입문반"
       AND event_name = "page_view") as pv_yes
FROM ga 

# with절 
with yesyes as (select count(distinct user_pseudo_id,ga_session_id) as yes_pv
              from ga 
              where page_title = "백문이불여일타 SQL 캠프 입문반"
              and event_name = "page_view"),
    nono as (select count(distinct user_pseudo_id,ga_session_id) as with_total
              from ga)

select with_total as total 
      ,with_total - yes_pv as pv_no
      ,yes_pv as pv_yes 
from yesyes, nono
      

1.1. 회고겸 주저리 
- 해당 문제는 서브쿼리를 사용하는 것과 with문을 사용하는 것 중에서 어느게 성능적인 면에서 우수할까?
- https://schatz37.tistory.com/3

[추가]
- WITH절 이란?
   - 이름이 부여된 서브쿼리 
   - VIEW : 한 번 만들어놓으면 DROP할때까지 없어지지 않음
   - WITH : 한 번 쿼리문내에 정의되어 있을 경우 그 쿼리 내에서만 실행됨
   
   - WITH 절은 오라클 공유 메모리에 임시 테이블을 생성하여 반복 재사용이 가능하도록 한다.
   - WITH절을 사용하면 동일 테이블 접근을 최소화 하여 메모리에 생성된 임시 테이블에서 필요한 데이터를 메모리로 접근하기 때문에 
     매번 디스트 IO로 테이블에 접근하는 것 보다 성능을 개선을 개선할 수 있다는 장점이 있다.
   - 복잡한 SQL에서 동일 블록에 대해 반복적으로 SQL문을 사용하는 경우 그 블록에 이름을 부여해서 재사용 함으로써 쿼리 성능이 향상되고, LINE도 최소화 시켜준다

- 현업에서는 서브쿼리 -> with로 순차적으로 묶는 것을 가장 권장한다
    - 그 이유는 가독성 측면 (위에서 아래로 흐르며 읽는 인간의 특성)과 디버깅 할 때 (with절로 묶고 묶어 덩어리로 체크할 수 있음) 좋기 때문이다
    - 그래서 서브 쿼리(with절도 서브쿼리임..ㅎ 이름이 있는 서브쿼리)를 가장 권장한다. 
    
- 서브쿼리와 with절 성능 측면 
   - with절에 정의된 내용을 한번만 사용한다면 서브쿼리를 사용하는 것과 크게 성능 차이가 나지 않는다.
   - with문의 가장 큰 장점은 with절의 내용을 한번에 올려놓고 계속 재사용한다는 것에 의미가 있기 때무네 with절에 구문을 여러번 참조하는 쿼리를 만들수록 그 효과가 배로 증가한다.

2. 페이지에서 스크롤을 내렸을까?
WITH PV AS (SELECT user_pseudo_id
      ,ga_session_id
      ,event_timestamp_kst
        FROM ga
        WHERE page_title = '백문이불여일타 SQL 캠프 입문반' AND 
              event_name ='page_view'), scroll as(
        SELECT user_pseudo_id
              ,ga_session_id
              ,event_timestamp_kst
        FROM ga 
        WHERE page_title = '백문이불여일타 SQL 캠프 입문반' AND
              event_name = 'scroll')

SELECT COUNT(distinct user_pseudo_id,ga_session_id) AS total 
      ,(COUNT(distinct user_pseudo_id,ga_session_id)-(SELECT COUNT(distinct user_pseudo_id,ga_session_id) FROM ga WHERE page_title = '백문이불여일타 SQL 캠프 입문반' AND 
              event_name ='page_view')) AS pv_no
      
      ,(SELECT COUNT(distinct PV.user_pseudo_id,PV.ga_session_id)- COUNT(distinct scroll.user_pseudo_id, scroll.ga_session_id) as pv_yes_scroll_no
        FROM PV
        LEFT JOIN scroll ON PV.user_pseudo_id = scroll.user_pseudo_id
        AND PV.ga_session_id = scroll.ga_session_id
        AND PV.event_timestamp_kst <= scroll.event_timestamp_kst) as pv_yes_scroll_no
      
      ,(SELECT COUNT(distinct scroll.user_pseudo_id, scroll.ga_session_id) 
        FROM PV
        LEFT JOIN scroll ON PV.user_pseudo_id = scroll.user_pseudo_id
        AND PV.ga_session_id = scroll.ga_session_id
        AND PV.event_timestamp_kst <= scroll.event_timestamp_kst) AS pv_yes_scroll_yes
FROM ga

