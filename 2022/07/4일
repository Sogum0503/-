# 책 진행 중간 보고 
- 그로스 해킹 챕터 1 완독 
   - 내일은 인프런 강의를 읽을 계획 
   
# 스터디를 진행하며 추가로 얻은 지식과 문제 풀이 방법 

1. CROSS JOIN 
▶ 정의 
- 두 개의 테이블을 아무 조건없이 연결시키는 조인 방법
- 카티시안 곱을 하는 것과 같은 의미를 나타낸다.
  따라서 두 집합의 건수만큼의 곱 만큼의 결과가 나오게 된다. 
  
▶ 쿼리 작성 방식:  
  SELECT * FROM cities CROSS JOIN transport;
  SELECT * FROM cities JOIN transport;
  SELECT * FROM cities, transport; 

2. SELF-JOIN
▶ 정의
- 같은 테이블에서 CROSS JOIN하는 것 
- 동일한 테이블이지만 개념적으로 다른 정보를 결합하는 JOIN 

▶ 쿼리 작성 방식:
    SELECT e.empno, e.ename, e.mgr, m.empno, m.ename
    FROM emp e, emp m
    WHERE e.mgr = m.empno;
    
[1280#] Students and Examinations -- with절 활용

WITH summary as (
                  SELECT a.student_id
                        ,a.student_name
                        ,b.subject_name
                        ,ROW_NUMBER() OVER PARTITION BY (a.student_name, b.subject_name) AS num
                  FROM students a CROSS JOIN subjects b 
                 ) 
                 
SELECT s.student_id 
      ,s.student_name
      ,s.subject_name
      ,ifnull count(e.subject_name),0) attended_exam
FROM summary s 
    LEFT JOIN examinations e ON s.student_id = e.student_id
                            AND s.subject_name = e.subject_name 
GROUP BY 1,2,3
ORDER BY 1,3
                     
                     
                     
[585] Investments in 2016  

1. EXISTS와 IN 함수 차이 비교 

▶ 공통점
- WHERE절에서 조건을 걸어줄 때 사용한다

▶ 차이점
<EXISTS> 
EXISTS는 서브쿼리에 대한 결과가 '존재하는지'만 확인한다.

JOIN되는 컬럼에 NULL을 갖는 ROW값이 존재한다면,NOT EXISTS는 TRUE를 리턴함. 

<IN>
IN은 실제 존재하는 데이터들의 모든 값까지 확인한다.

JOIN되는 컬럼에 NULL을 갖는 ROW값이 존재한다면, NOT IN은 FALSE를 리턴한다.

즉, NOT IN을 사용하면 조건에 맞는 데이터가 있다고 하더라도 NULL이 존재하면 "NO ROWS SELECTED"라고 나오게 된다.
따라서 NOT IN을 사용할 때는 NVL로 NULL 체크를 꼭 진행해야 한다. 

▶ 성능 관점에서..
IN보다는 EXISTS가 우수하다고 함.

# sub-query인데, EXIST를 이용한 

SELECT ROUND(SUM(tiv_2016,2) tiv_2016
FROM insurance t1
WHERE EXISTS (
               SELECT *
               FROM insurance 
               WHERE pid<> t1.pid
               )
AND NOT EXISTS(
            SELECT *
            FROM insurance
            WHERE pid<> t1.pid
            AND (lat,lon) = (t1.lat,t1.lon)
            )
