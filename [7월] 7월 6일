# 리트코드 문제 풀이 

[1303#] Find the Team Size

# solution 1 -- window function 
SELECT employee_id
      , COUNT(employee_id) OVER(PARTITION BY team_id) AS team_size
FROM employee

# solution 2 -- 만약 window function을 사용하지 못할 때 
WITH cnt AS (
            SELECT team_id
                    , COUNT(employee_id) AS team_size
            FROM employee
            GROUP BY team_id)

SELECT employee_id
        , team_size
FROM employee e 
    LEFT JOIN cnt c ON e.team_id = c.team_id

# solution 3 --subquery
SELECT employee_id
     , cnt team_size
FROM Employee
     JOIN (
           SELECT team_id
                , COUNT(*) cnt
           FROM Employee
           GROUP BY team_id
           ) sub ON Employee.team_id = sub.team_id

-------------------------------------------------------------------------------------------------
[1322#] Ads Performance

# solution 1 -- with, ifnull 

WITH temp AS (
                SELECT ad_id
                        , COUNT(CASE WHEN action = 'Clicked' THEN user_id END) AS act_click
                        , COUNT(CASE WHEN action = 'Viewed' THEN user_id END) AS act_view 
                FROM ads 
                GROUP BY ad_id
               )
               
SELECT ads.ad_id AS ad_id 
       ,IFNULL(ROUND(act_click/(act_click+act_view)*100,2),0) AS ctr 
FROM ads 
    LEFT JOIN temp ON ads.ad_id = temp.ad_id 
GROUP BY ad_id 
ORDER BY ctr desc, ad_id asc 

# solution 2 -- coalesce 
SELECT ad_id
      ,COALESCE(ROUND(100*SUM(CASE WHEN action ='Clicked' THEN 1 ELSE 0 END)/SUM(CASE WHEN action IN('Clicked', 'Viewed') THEN 1 ELSE 0 END),2),0) ctr
FROM ads
GROUP BY ad_id
ORDER BY ctr desc, ad_id

------------------------------------
[608] Tree Node

# solution 1 
SELECT id
	,(CASE WHEN p_id IS NULL THEN 'Root'
              WHEN id IN (SELECT p_id FROM tree) THEN 'Inner'
          ELSE 'Leaf'
          END) type
FROM tree
ORDER BY id;

# solution 2 
SELECT DISTINCT t1.id
        , (CASE WHEN t1.p_id IS NULL THEN 'Root' -- p_id가 Null이면 root 
               WHEN t1.p_id Is NOT NULL AND t2.id IS NOT NULL THEN 'Inner' -- 상위 노드를 가지고 있고, 하위 노드도 가지고 있으면 inner 
               WHEN t1.p_id IS NOT NULL AND t2.id IS NULL THEN 'Leaf' -- 상위 노드는 있지만, 하위 노드는 없으면 leaf 
         END) AS Type
FROM tree t1 
    LEFT JOIN tree t2 ON t1.id = t2.p_id 
    
-----------------------------------------------------
[612#] Shortest Distance in a Plane

SELECT ROUND(SQRT(POW((p2.x-p1.x),2)+POW((p2.y-p1.y),2)),2) AS shortest
FROM point2d p1
	JOIN point2d p2 ON p1.x != p2.x OR p1.y != p2.y
ORDER BY shortest
LIMIT 1;
